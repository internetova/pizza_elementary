import 'package:elementary/elementary.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:pizza_elementary/features/app/di/app_scope.dart';
import 'package:pizza_elementary/features/common/constants/app_sizes.dart';
import 'package:pizza_elementary/features/pizza/domain/entity/custom_pizza.dart';
import 'package:pizza_elementary/features/pizza/domain/entity/ingredient.dart';
import 'package:pizza_elementary/features/pizza/domain/entity/ingredients_type.dart';
import 'package:pizza_elementary/features/pizza/screens/details/pizza_details_screen.dart';
import 'package:pizza_elementary/features/pizza/screens/details/pizza_details_screen_model.dart';
import 'package:pizza_elementary/features/platform/factory/platform_widgets_factory.dart';
import 'package:provider/provider.dart';

abstract class IPizzaDetailsScreenWidgetModel extends IWidgetModel {
  ListenableState<EntityState<List<Ingredient>>> get ingredientsState;

  ListenableState<Set<IngredientsType>> get additionalIngredientsState;

  ListenableState<int> get finalPriceState;

  ThemeData get theme;

  PlatformWidgetsFactory get widgetsFactory;

  double get indentationUnderBottomSheet;

  String getIngredients();

  void toggleIngredient(IngredientsType ingredientsType, int price);

  void addToCart();

  void close();
}

PizzaDetailsScreenWidgetModel defaultPizzaDetailsScreenWidgetModelFactory(BuildContext context) {
  final appDependencies = context.read<IAppScope>();
  final navigator = Navigator.of(context);

  final model = PizzaDetailsScreenModel(
    appDependencies.errorHandler,
    appDependencies.pizzaService,
    appDependencies.widgetsFactory,
    appDependencies.cartStore,
  );

  return PizzaDetailsScreenWidgetModel(model, navigator);
}

/// Default widget model for PizzaDetailsScreenWidget
class PizzaDetailsScreenWidgetModel extends WidgetModel<PizzaDetailsScreen, PizzaDetailsScreenModel>
    implements IPizzaDetailsScreenWidgetModel {
  /// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
  final _ingredientsState = EntityStateNotifier<List<Ingredient>>();

  /// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
  final _additionalIngredientsState = StateNotifier<Set<IngredientsType>>(initValue: {});

  /// –¶–µ–Ω–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ –∑–∞–∫–∞–∑–∞
  late final StateNotifier<int> _finalPriceState;

  final NavigatorState _navigator;

  /// –ö–∞—Ä—Ç–∞ –¥–ª—è —É—á–µ—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–æ–π
  final _additionalIngredientsMap = <IngredientsType, int>{};

  /// –ë–∏–ª–¥–µ—Ä –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–∏—Ü—Ü—ã
  final _pizzaBuilder = CustomPizza.builder;

  @override
  ListenableState<EntityState<List<Ingredient>>> get ingredientsState => _ingredientsState;

  @override
  ListenableState<Set<IngredientsType>> get additionalIngredientsState =>
      _additionalIngredientsState;

  @override
  ListenableState<int> get finalPriceState => _finalPriceState;

  @override
  ThemeData get theme => Theme.of(context);

  @override
  PlatformWidgetsFactory get widgetsFactory => model.widgetsFactory;

  @override
  double get indentationUnderBottomSheet => defaultTargetPlatform == TargetPlatform.iOS
      ? AppSizes.cupertinoIndentationUnderBottomSheet
      : AppSizes.materialIndentationUnderBottomSheet;

  PizzaDetailsScreenWidgetModel(
    PizzaDetailsScreenModel model,
    NavigatorState navigator,
  )   : _navigator = navigator,
        super(model);

  @override
  void initWidgetModel() {
    super.initWidgetModel();

    _init();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–∏—Ü—Ü—ã –≤ –≤–∏–¥–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  @override
  String getIngredients() {
    final ingredients = widget.pizza.ingredients;
    final buffer = StringBuffer();

    for (var i = 0; i < ingredients.length; i++) {
      var str = '';

      str = i == ingredients.length - 1
          ? '${ingredients[i].name}, ${widget.pizza.sauce.name}.'
          : '${ingredients[i].name}, ';

      buffer.write(str);
    }

    return buffer.toString();
  }

  /// –í—ã–±–æ—Ä / –æ—Ç–º–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
  @override
  void toggleIngredient(IngredientsType ingredient, int price) {
    /// –ó–∞–ø–∏—à–µ–º –≤ –∫–∞—Ä—Ç—É —Å —Ü–µ–Ω–æ–π —á—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞
    _additionalIngredientsMap.containsKey(ingredient)
        ? _additionalIngredientsMap.remove(ingredient)
        : _additionalIngredientsMap[ingredient] = price;

    final items = _additionalIngredientsState.value?.toSet();
    items?.contains(ingredient) ?? false ? items?.remove(ingredient) : items?.add(ingredient);

    _additionalIngredientsState.accept(items);
    _calculateFinalPrice();

    /// –¥–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    _pizzaBuilder.setIngredients(_additionalIngredientsState.value!);
  }

  /// –ó–∞–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∫—É —Å –ø–∏—Ü—Ü–µ–π
  @override
  void close() {
    _navigator.pop();
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
  @override
  void addToCart() {
    _calculateFinalPrice();

    /// —Å–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–∏—Ü—Ü—É
    final customPizza = _pizzaBuilder.build();
    debugPrint('üçïüçïüçï customPizza \n$customPizza');

    model.addToCart(customPizza);
    close();
  }

  /// –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞
  void _calculateFinalPrice() {
    final basePrice = widget.pizza.price;
    var finalPrice = basePrice;

    if (_additionalIngredientsMap.isNotEmpty) {
      finalPrice += _additionalIngredientsMap.values.reduce((a, b) => a + b);
    }

    _finalPriceState.accept(finalPrice);

    /// –¥–æ–±–∞–≤–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    _pizzaBuilder.setPrice(_finalPriceState.value!);
  }

  Future<void> _init() async {
    _finalPriceState = StateNotifier<int>(initValue: widget.pizza.price);
    _ingredientsState.loading();
    final pizzas = await model.getPizzaIngredients();
    _ingredientsState.content(pizzas);

    _pizzaBuilder
      ..setTitle(widget.pizza.title)
      ..setBase(widget.pizza.base)
      ..setSauce(widget.pizza.sauce)
      ..setImageUrl(widget.pizza.imageUrl);
  }
}
